# @generated by `cargo buckal`

def _cargo_manifest_impl(ctx: AnalysisContext) -> list[Provider]:
    env_dict = ctx.actions.declare_output("ENV_DICT")
    env_flags = ctx.actions.declare_output("ENV_FLAGS")

    cmd = [
        ctx.attrs.executor[RunInfo],
        cmd_args("--vendor=", ctx.attrs.vendor[DefaultInfo].default_outputs[0], delimiter = ""),
        cmd_args("--out-dict=", env_dict.as_output(), delimiter = ""),
        cmd_args("--out-flags=", env_flags.as_output(), delimiter = ""),
    ]

    ctx.actions.run(
        cmd,
        category = "cargo_manifest",
    )

    return [DefaultInfo(
        default_output = None,
        sub_targets = {
            "env_dict": [DefaultInfo(default_output = env_dict)],
            "env_flags": [DefaultInfo(default_output = env_flags)],
        },
    )]

cargo_manifest = rule(
    impl = _cargo_manifest_impl,
    attrs = {
        "vendor": attrs.dep(),
        "executor": attrs.default_only(attrs.exec_dep(providers = [RunInfo], default = "buckal//tool:manifest_parse")),
    },
)