# @generated by `cargo buckal`

import argparse
import os
import re
import json
from pathlib import Path
from tomllib import load
from typing import IO, NamedTuple

# this is the current buck2 project root
TOOL_CWD: str = os.path.join(os.getcwd(), "")


class Args(NamedTuple):
    vendor: Path
    out_dict: IO[str]
    out_flags: IO[str]

def arg_parse() -> Args:
    parser = argparse.ArgumentParser(description="Run Rust build script")
    parser.add_argument("--vendor", type=Path, required=True)
    parser.add_argument("--out-dict", type=argparse.FileType("w"), required=True)
    parser.add_argument("--out-flags", type=argparse.FileType("w"), required=True)

    return Args(**vars(parser.parse_args()))

def main() -> None:
    args = arg_parse()

    # raise EOFError(f"Debug: TOOL_CWD={TOOL_CWD}")

    cargo_env = {}
    with (args.vendor / "Cargo.toml").open("rb") as f:
        cargo_toml = load(f)

    cargo_env["CARGO_MANIFEST_DIR"] = str(TOOL_CWD / args.vendor)
    cargo_env["CARGO_MANIFEST_PATH"] = str(TOOL_CWD / args.vendor / "Cargo.toml")

    # Parse semantic versioning
    semver_pattern = re.compile(r"^(\d+)\.(\d+)\.(\d+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?$")

    cargo_env["CARGO_PKG_VERSION"] = cargo_toml["package"]["version"]

    semver_match = semver_pattern.match(cargo_toml["package"]["version"])
    if semver_match:
        major, minor, patch, pre, build = semver_match.groups()
        cargo_env["CARGO_PKG_VERSION_MAJOR"] = major
        cargo_env["CARGO_PKG_VERSION_MINOR"] = minor
        cargo_env["CARGO_PKG_VERSION_PATCH"] = patch
        cargo_env["CARGO_PKG_VERSION_PRE"] = pre if pre else ""

    cargo_env["CARGO_PKG_AUTHORS"] = ":".join(cargo_toml["package"].get("authors", []))
    cargo_env["CARGO_PKG_NAME"] = cargo_toml["package"]["name"]
    cargo_env["CARGO_PKG_DESCRIPTION"] = cargo_toml["package"].get("description", "")
    cargo_env["CARGO_PKG_HOMEPAGE"] = cargo_toml["package"].get("homepage", "")
    cargo_env["CARGO_PKG_REPOSITORY"] = cargo_toml["package"].get("repository", "")
    # cargo_env["CARGO_PKG_LICENSE"] = cargo_toml["package"].get("license", "")
    # cargo_env["CARGO_PKG_LICENSE_FILE"] = cargo_toml["package"].get("license-file", "")
    cargo_env["CARGO_PKG_RUST_VERSION"] = cargo_toml["package"].get("rust-version", "")
    # cargo_env["CARGO_PKG_README"] = cargo_toml["package"].get("readme", "")

    env_flags = ""
    for key, value in cargo_env.items():
        if key == "CARGO_PKG_DESCRIPTION":
            # Escape newlines and quotes in description
            value = value.replace("\n", "\\n").replace('"', '\\"')
            env_flags += f"--env-set={key}=\"{value}\"\n"
        else:
            env_flags += f"--env-set={key}={value}\n"
    args.out_flags.write(env_flags)

    if cargo_toml["package"].get("links"):
        cargo_env["CARGO_MANIFEST_LINKS"] = cargo_toml["package"].get("links")

    json.dump(cargo_env, args.out_dict, indent=2)


if __name__ == "__main__":
    main()